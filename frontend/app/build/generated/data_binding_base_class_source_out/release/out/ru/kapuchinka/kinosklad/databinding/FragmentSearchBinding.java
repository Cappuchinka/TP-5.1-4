// Generated by view binder compiler. Do not edit!
package ru.kapuchinka.kinosklad.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ScrollView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import ru.kapuchinka.kinosklad.R;

public final class FragmentSearchBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageButton buttonSearch;

  @NonNull
  public final RecyclerView rVSearch;

  @NonNull
  public final ScrollView scrollSearch;

  @NonNull
  public final EditText searchStroke;

  private FragmentSearchBinding(@NonNull ConstraintLayout rootView,
      @NonNull ImageButton buttonSearch, @NonNull RecyclerView rVSearch,
      @NonNull ScrollView scrollSearch, @NonNull EditText searchStroke) {
    this.rootView = rootView;
    this.buttonSearch = buttonSearch;
    this.rVSearch = rVSearch;
    this.scrollSearch = scrollSearch;
    this.searchStroke = searchStroke;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentSearchBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentSearchBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_search, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentSearchBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.button_search;
      ImageButton buttonSearch = ViewBindings.findChildViewById(rootView, id);
      if (buttonSearch == null) {
        break missingId;
      }

      id = R.id.r_v_search;
      RecyclerView rVSearch = ViewBindings.findChildViewById(rootView, id);
      if (rVSearch == null) {
        break missingId;
      }

      id = R.id.scroll_search;
      ScrollView scrollSearch = ViewBindings.findChildViewById(rootView, id);
      if (scrollSearch == null) {
        break missingId;
      }

      id = R.id.search_stroke;
      EditText searchStroke = ViewBindings.findChildViewById(rootView, id);
      if (searchStroke == null) {
        break missingId;
      }

      return new FragmentSearchBinding((ConstraintLayout) rootView, buttonSearch, rVSearch,
          scrollSearch, searchStroke);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
